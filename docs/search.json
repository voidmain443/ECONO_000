[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "economics_000",
    "section": "",
    "text": "Preface\n경제학과 신입생을 위한 파이썬 수업에 강사를 맏게 된 박준하입니다.\n여러분은 앞으로 미시경제, 거시경제, 계량경제 등 다양한 경제학 분야를 탐구하며 세상을 이해하는 새로운 시각을 배우게 될 것입니다. 이러한 학문적 여정에서 데이터 분석과 모델링 능력은 점점 더 중요해지고 있으며, 파이썬(Python)은 현대 경제학 연구와 분석에 있어 가장 강력하고 필수적인 도구 중 하나로 자리 잡았습니다.\n과거에는 복잡한 경제 데이터를 분석하거나 경제 모델을 시뮬레이션하기 위해 특정 통계 소프트웨어에 의존하는 경우가 많았습니다. 하지만 파이썬은 뛰어난 범용성과 강력한 데이터 과학 라이브러리 생태계를 바탕으로, 데이터 수집 및 처리, 통계 분석, 시각화, 머신러닝 모델링에 이르기까지 경제 분석의 전 과정을 아우르는 유연하고 효율적인 환경을 제공합니다.\n이 책은 경제학을 처음 접하는, 그리고 프로그래밍이 낯설 수 있는 신입생 여러분을 위해 특별히 설계되었습니다. 파이썬의 가장 기초적인 문법부터 시작하여 변수, 자료형, 조건문, 반복문 등 핵심 개념을 차근차근 익힐 것입니다. 중요한 것은, 이러한 프로그래밍 개념을 단순히 배우는 데 그치지 않고, 여러분에게 익숙한 ’수요와 공급’과 같은 기초 경제학 원리와 예제를 통해 배우고 응용한다는 점입니다.\n각 주차별 학습을 통해 여러분은 다음과 같은 능력을 키울 수 있습니다.\n총 8주간의 여정을 통해 여러분은 파이썬이라는 강력한 도구를 손에 쥐고, 경제학적 사고를 더욱 확장할 수 있는 튼튼한 기초를 다지게 될 것입니다. 프로그래밍이 처음에는 다소 어렵게 느껴질 수도 있습니다. 하지만 이 책에서 제시하는 단계별 설명과 예제를 꾸준히 따라오신다면, 어느새 파이썬으로 경제 데이터를 분석하고 있는 자신을 발견하게 될 것입니다.\n자, 이제 경제학적 통찰력에 컴퓨팅 능력을 더하는 흥미로운 여정을 함께 시작해 봅시다!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#과정-목표",
    "href": "index.html#과정-목표",
    "title": "economics_000",
    "section": "과정 목표:",
    "text": "과정 목표:\n\n파이썬 기초 프로그래밍 능력 습득\n기초 경제학 개념(수요, 공급, 균형 등)을 파이썬 코드로 구현 및 분석\n데이터 시각화를 통한 경제 현상 이해 증진\n향후 계량경제학, 데이터 분석 등 심화 학습을 위한 기초 마련\n\n주차별 학습 내용:\n\n\n\n\n\n\n\n\n\n주차\n주요 학습 주제\n세부 내용\n경제학 연계 내용/예제\n\n\n\n\n1\n파이썬 소개 및 환경 설정\n파이썬이란? 경제학에서의 파이썬 활용 사례. 아나콘다(Anaconda) 설치 및 주피터 노트북(Jupyter Notebook) 사용법. print() 함수, 주석, 기본 산술 연산.\n간단한 총비용, 총수입 계산. 경제 지표 출력 연습.\n\n\n2\n변수와 기본 자료형\n변수(Variable) 개념 및 명명 규칙. 숫자형(Integer, Float), 문자열(String), 불리언(Boolean) 자료형. input() 함수를 이용한 사용자 입력 받기.\n가격(Price), 수량(Quantity), 상품 이름 등 경제 변수 저장. 예산 제약 하 소비 가능 여부 판단 (Boolean).\n\n\n3\n조건문 (If 문)\nif, elif, else 조건문 문법. 비교 연산자 (==, !=, &lt;, &gt;, &lt;=, &gt;=), 논리 연산자 (and, or, not). 코드 들여쓰기의 중요성.\n가격 변화에 따른 구매 결정. 특정 소득 수준에 따른 세금 구간 적용. 수요의 법칙 예시 (가격 오르면 수요 감소).\n\n\n4\n리스트와 반복문 (For)\n순서가 있는 자료구조: 리스트(List) 생성, 인덱싱, 슬라이싱. for 반복문 기본 구조. range() 함수 활용. 리스트 요소 순회.\n여러 기간 동안의 가격/수량 데이터 리스트 저장. 리스트 내 평균 가격 계산. 특정 조건 상품 필터링.\n\n\n5\n반복문 (While)과 자료구조 심화\nwhile 반복문 기본 구조. 무한 루프 및 break. 딕셔너리(Dictionary) 자료구조 (Key-Value). 리스트와 딕셔너리 활용 연습.\n특정 예산 소진 시까지 상품 구매 시뮬레이션 (while). 상품 이름과 가격 매핑 (딕셔너리).\n\n\n6\n함수와 경제 모델 기초\n함수(Function) 정의(def) 및 호출. 매개변수(Parameter)와 반환값(Return). 함수의 필요성 (코드 재사용). 지역 변수와 전역 변수.\n수요 함수 Qd = f(P), 공급 함수 Qs = g(P)를 파이썬 함수로 정의하기. 특정 가격 입력 시 수요량/공급량 계산 함수 만들기.\n\n\n7\n데이터 시각화 기초 (Matplotlib)\nMatplotlib 라이브러리 소개 및 기본 사용법. 선 그래프(Line plot) 그리기. 축 레이블, 제목, 범례 추가.\n가격 변화에 따른 수요량/공급량 변화를 리스트로 준비. 수요 곡선과 공급 곡선 시각화.\n\n\n8\n균형 분석 및 응용\n수요/공급 함수의 연립을 통한 균형 가격 및 균형 거래량 계산 (간단한 경우). 시각화된 그래프에서 균형점 확인. 수요/공급 변화(shift) 시뮬레이션 및 시각화.\n파이썬 코드로 균형점 계산 함수 만들기. 외부 충격(예: 소득 증가, 기술 발전) 발생 시 새로운 균형점 시각화 및 분석.\n\n\n\n\n본 강의의 내용들은 일부 tts 등을 이용하여 강의 현장의 구어체등이 같이 작성되어 있을 수 있습니다. 버전 2버전 (다음학기) 등에서 이는 수정될 것입니다.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "1  week1. Introduction to python",
    "section": "",
    "text": "2 파이썬 소개 (Google Colab 환경)\n강의 개요:\n안녕하세요, 여러분! 경제학 분석 여정의 첫걸음을 떼는 시간입니다. 이번 주에는 왜 우리가 파이썬을 배워야 하는지 알아보고, 코딩 작업 환경인 Google Colab과 친숙해지는 시간을 갖겠습니다. 또한, 파이썬의 가장 기본적인 명령어인 print() 함수, 코드에 설명을 다는 주석, 그리고 파이썬을 계산기처럼 사용하는 방법에 대해 배우고 직접 실습해 볼 것입니다.\n이번 시간 학습 목표:\n준비물:",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "Introduction.html#들어가며-왜-경제학도가-파이썬을-배워야-할까요",
    "href": "Introduction.html#들어가며-왜-경제학도가-파이썬을-배워야-할까요",
    "title": "1  week1. Introduction to python",
    "section": "2.1 들어가며: 왜 경제학도가 파이썬을 배워야 할까요?",
    "text": "2.1 들어가며: 왜 경제학도가 파이썬을 배워야 할까요?\n여러분 중 많은 분들이 ‘경제학 공부하기도 바쁜데, 왜 코딩까지 배워야 할까?’ 하는 생각을 하실 수 있습니다. 아주 합리적인 질문이죠.\n전통적으로 경제학 분석에는 엑셀(Excel)과 같은 스프레드시트 프로그램이나 이뷰(EViews), 스테이타(Stata) 같은 통계 패키지가 많이 사용되었습니다. 이 도구들은 여전히 특정 작업에 유용하지만, 현대 경제학이 다루는 데이터의 규모와 복잡성은 점점 커지고 있습니다.\n\n데이터의 규모: 이제는 수백만, 수천만 건을 넘어서는 빅데이터를 다루는 경우가 많아졌습니다. 엑셀은 일정 규모 이상의 데이터를 다루기 어렵습니다.\n분석의 복잡성: 최신 계량경제 모델이나 머신러닝 기법을 적용하려면 기존 통계 패키지만으로는 한계가 있을 수 있습니다.\n자동화와 반복 작업: 웹에서 데이터를 주기적으로 가져오거나(크롤링), 동일한 분석을 여러 데이터셋에 반복 적용하는 등의 작업을 자동화하기 어렵습니다.\n재현성: 다른 연구자가 분석 과정을 똑같이 따라하고 검증하기 어렵게 만드는 ‘클릭 기반’ 작업 방식의 한계가 있습니다.\n\n파이썬은 이러한 문제들을 해결하는 데 강력한 해답을 제시합니다:\n\n다재다능함(Versatility): 파이썬은 데이터 분석뿐만 아니라 웹 개발, 자동화, 인공지능 등 다양한 분야에서 쓰이는 범용 언어입니다. 즉, 한번 배워두면 활용 범위가 매우 넓습니다.\n강력한 생태계(Rich Ecosystem): NumPy(수치 계산), Pandas(데이터 처리), Matplotlib/Seaborn(시각화), Scikit-learn(머신러닝), Statsmodels(통계 분석) 등 경제/데이터 분석에 필수적인 고성능 라이브러리(미리 만들어진 코드 모음)가 풍부합니다. 이 라이브러리 덕분에 복잡한 작업도 비교적 쉽게 수행할 수 있습니다.\n오픈 소스 및 무료: 누구나 무료로 사용할 수 있고, 전 세계 수많은 개발자와 사용자들이 함께 발전시키는 활발한 커뮤니티를 가지고 있어 문제 해결에 도움을 받기 용이합니다.\n코드 기반의 재현성: 모든 분석 과정이 코드로 기록되므로, 분석 결과를 다른 사람이 쉽게 확인하고 재현할 수 있습니다. 이는 과학적 연구의 투명성과 신뢰성을 높이는 데 중요합니다.\n\n결론적으로, 파이썬을 배우는 것은 여러분의 경제학 분석 능력을 한 단계 끌어올리고, 미래의 데이터 기반 사회에서 경쟁력을 갖추는 데 큰 도움이 될 것입니다. 조금 낯설더라도 즐거운 마음으로 함께 시작해 봅시다!",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "Introduction.html#우리의-클라우드-작업실-google-colab-시작하기",
    "href": "Introduction.html#우리의-클라우드-작업실-google-colab-시작하기",
    "title": "1  week1. Introduction to python",
    "section": "2.2 우리의 클라우드 작업실: Google Colab 시작하기",
    "text": "2.2 우리의 클라우드 작업실: Google Colab 시작하기\n파이썬 코드를 작성하고 실행하려면 ’개발 환경’이 필요합니다. 우리는 설치가 필요 없고 무료로 사용할 수 있는 Google Colaboratory (Colab) 을 사용할 것입니다.\nColab 접속 및 새 노트 만들기:\n\n웹 브라우저에서 colab.research.google.com 으로 접속합니다.\nGoogle 계정으로 로그인합니다.\n파일 &gt; 새 노트 메뉴를 선택하여 새로운 빈 노트를 만듭니다.\n노트 상단의 UntitledX.ipynb 부분을 클릭하여 파일 이름을 Week1_Practice.ipynb 처럼 바꿔줍니다. (자동으로 구글 드라이브에 저장됩니다.)\n\nColab 기본 인터페이스:\n\n셀(Cell): Colab 노트북은 여러 개의 ’셀’로 구성됩니다. 셀에는 크게 두 종류가 있습니다.\n\n코드 셀: 파이썬 코드를 입력하고 실행하는 곳입니다. 회색 배경이고 왼쪽에 실행(▶) 버튼이 있습니다.\n텍스트 셀: 설명, 제목, 이미지 등을 넣는 곳입니다. 지금 여러분이 읽고 있는 이 내용도 텍스트 셀에 작성된 것입니다. (더블클릭하면 편집 가능하며, Markdown이라는 간단한 서식 문법을 사용합니다.)\n\n셀 실행: 셀을 실행하려면 해당 셀을 클릭하고 Shift + Enter 키를 누르거나 셀 왼쪽의 실행(▶) 버튼을 클릭하면 됩니다. 코드 셀은 코드를 실행하고 결과를 아래에 보여주고, 텍스트 셀은 서식이 적용된 텍스트를 보여줍니다.\n셀 추가/삭제: 화면 상단 메뉴 아래의 + 코드, + 텍스트 버튼으로 셀을 추가할 수 있고, 셀을 선택한 상태에서 오른쪽의 휴지통 아이콘으로 삭제할 수 있습니다.\n\n[실습] Colab 인터페이스 익숙해지기\n\n+ 코드 버튼을 눌러 아래에 새로운 코드 셀을 추가해보세요.\n+ 텍스트 버튼을 눌러 새로운 텍스트 셀을 추가하고, 간단한 메모(예: “Colab 사용 연습 중”)를 작성한 뒤 Shift + Enter를 눌러보세요.\n방금 만든 셀들을 선택하고 휴지통 아이콘을 눌러 삭제해보세요.",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "Introduction.html#화면에-글자-출력하기-print-함수",
    "href": "Introduction.html#화면에-글자-출력하기-print-함수",
    "title": "1  week1. Introduction to python",
    "section": "2.3 화면에 글자 출력하기 (print() 함수)",
    "text": "2.3 화면에 글자 출력하기 (print() 함수)\n자, 이제 첫 파이썬 코드를 작성해 봅시다! 파이썬에게 우리가 원하는 내용을 화면에 보여달라고 요청할 때 print() 함수를 사용합니다.\nprint() 함수는 괄호 () 안에 출력하고 싶은 내용을 넣으면 됩니다. 만약 글자(문자열)를 출력하고 싶다면, 내용을 따옴표(\" 또는 ')로 감싸줘야 합니다.\n예제 1: 기본적인 문자열 출력\n\nprint(\"Hello, Economics World!\")\n\nHello, Economics World!\n\n\n\nprint('파이썬 공부를 시작합니다.') # 작은따옴표도 가능합니다.\n\n파이썬 공부를 시작합니다.\n\n\n예제 2: 숫자 출력\n숫자를 출력할 때는 따옴표 없이 그냥 숫자를 넣으면 됩니다.\n\nprint(123)\n\n123\n\n\n\nprint(3.14159)\n\n3.14159\n\n\n예제 3: 계산 결과 출력\n괄호 안에 직접 계산식을 넣으면, 파이썬이 계산을 먼저 수행하고 그 결과를 출력해 줍니다.\n\nprint(100 + 50) # 덧셈 결과 출력\n\n150\n\n\n\nprint(10 * 5) # 곱셈 결과 출력\n\n50\n\n\n예제 4: 여러 내용 함께 출력하기 (쉼표 사용)\nprint() 함수 안에 쉼표(,)를 사용하여 여러 개의 값(문자열, 숫자 등)을 나열하면, 각 값 사이에 공백이 하나씩 들어가면서 함께 출력됩니다.\n\nprint(\"가격:\", 15000, \"원\")\n\n가격: 15000 원\n\n\n\nprint(\"오늘의 판매량:\", 50, \"개,\", \"목표 달성!\")\n\n오늘의 판매량: 50 개, 목표 달성!\n\n\n\n[실습 1] print() 함수 사용 연습\n아래 요구사항에 맞춰 print() 함수를 사용하여 결과를 출력하는 코드를 각각의 코드 셀에 작성해보세요.\n\n본인의 이름 또는 별명을 화면에 출력하세요.\n숫자 2025를 화면에 출력하세요.\n50 * 10 의 계산 결과를 화면에 출력하세요.\n“수업 과목:” 이라는 글자와 “파이썬 수업” 이라는 글자를 쉼표를 이용해 한 줄에 함께 출력하세요. (결과 예: 수업 과목: 파이썬 수업)\n\n\n\n# 실습 1-1: 본인 이름/별명 출력\n# 여기에 코드를 작성하세요.\n\n\n# 실습 1-2: 숫자 2025 출력\n# 여기에 코드를 작성하세요.\n\n\n# 실습 1-3: 50 * 10 계산 결과 출력\n# 여기에 코드를 작성하세요.\n\n\n# 실습 1-4: 여러 내용 함께 출력\n# 여기에 코드를 작성하세요.",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "Introduction.html#코드에-메모-남기기-주석-comment",
    "href": "Introduction.html#코드에-메모-남기기-주석-comment",
    "title": "1  week1. Introduction to python",
    "section": "2.4 코드에 메모 남기기: 주석 (Comment)",
    "text": "2.4 코드에 메모 남기기: 주석 (Comment)\n코드를 작성하다 보면, 이 코드가 어떤 기능을 하는지, 왜 이렇게 작성했는지 나중에 다시 보거나 다른 사람에게 설명해야 할 때가 있습니다. 이때 코드에 주석(Comment) 을 달아두면 매우 유용합니다.\n파이썬에서 주석은 # 기호로 시작합니다. # 기호 뒤에 오는 내용은 그 줄 끝까지 파이썬 실행기가 무시합니다. 즉, 프로그램 실행에 아무런 영향을 주지 않고 오직 사람만 볼 수 있는 메모입니다.\n예제 1: 코드 설명 주석\n\n# 아래 코드는 환영 메시지를 출력합니다. (이 줄은 주석입니다)\nprint(\"Welcome to Python for Economics!\")\n\nWelcome to Python for Economics!\n\n\n예제 2: 코드 옆 주석\n코드와 같은 줄에 설명을 짧게 추가할 수도 있습니다.\n\nprint(365 * 24) # 1년은 몇 시간인지 계산\n\n8760\n\n\n예제 3: 코드 실행 잠시 막기 (주석 처리)\n특정 코드 라인을 실행하고 싶지 않을 때, 그 줄 맨 앞에 #을 붙여 주석으로 만들면 해당 코드는 실행되지 않습니다. 디버깅할 때 유용하게 쓰입니다.\n\nprint(\"이 메시지는 보입니다.\")\n# print(\"이 메시지는 주석 처리되어 보이지 않습니다.\")\nprint(\"이 메시지도 보입니다.\")\n\n이 메시지는 보입니다.\n이 메시지도 보입니다.\n\n\n\n[실습 2] 주석 사용 연습\n\n아래 코드 셀에 print(\"오늘 날짜:\", \"2025년 4월 17일\") 코드를 작성하고, 그 코드 윗줄에 #를 이용하여 “오늘 날짜를 출력하는 코드” 라는 주석을 추가하세요.\n새로운 코드 셀에 print(12 * 30) 코드를 작성하고, 같은 줄 코드 뒤에 #를 이용하여 “1년은 약 몇 개월인지 계산” 이라는 주석을 추가하세요.\n\n\n\n# 실습",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "Introduction.html#파이썬-계산기-기본-산술-연산",
    "href": "Introduction.html#파이썬-계산기-기본-산술-연산",
    "title": "1  week1. Introduction to python",
    "section": "2.5 파이썬 계산기: 기본 산술 연산",
    "text": "2.5 파이썬 계산기: 기본 산술 연산\n파이썬은 기본적인 사칙연산부터 거듭제곱까지 다양한 수학 계산을 할 수 있습니다. 주요 산술 연산자는 다음과 같습니다.\n\n+ : 덧셈\n- : 뺄셈\n* : 곱셈 (별표 * 사용)\n/ : 나눗셈 (결과는 소수점을 포함하는 실수(float) 형태)\n** : 거듭제곱 (예: 2 ** 3 은 \\(2^3 = 8\\))\n// : 정수 나눗셈 (나눗셈 결과의 몫만 구함)\n% : 나머지 (나눗셈 결과의 나머지만 구함)\n() : 괄호 (연산 순서 지정, 괄호 안을 가장 먼저 계산 - PEMDAS/BODMAS 원칙)\n\n예제 1: 사칙연산\n\nprint(\"10 + 5 =\", 10 + 5)\nprint(\"10 - 5 =\", 10 - 5)\nprint(\"10 * 5 =\", 10 * 5)\nprint(\"10 / 5 =\", 10 / 5)\n\n10 + 5 = 15\n10 - 5 = 5\n10 * 5 = 50\n10 / 5 = 2.0\n\n\n예제 2: 거듭제곱, 정수 나눗셈, 나머지\n\nprint(\"2의 5제곱 =\", 2 ** 5) # 2*2*2*2*2\nprint(\"17 나누기 5의 몫 =\", 17 // 5) # 17 = 5*3 + 2 에서 몫은 3\nprint(\"17 나누기 5의 나머지 =\", 17 % 5) # 17 = 5*3 + 2 에서 나머지는 2\n\n2의 5제곱 = 32\n17 나누기 5의 몫 = 3\n17 나누기 5의 나머지 = 2\n\n\n예제 3: 연산 순서와 괄호\n파이썬은 수학에서와 같이 곱셈/나눗셈을 덧셈/뺄셈보다 먼저 계산합니다. 괄호를 사용하면 연산 순서를 바꿀 수 있습니다.\n\nprint(\"2 + 3 * 4 =\", 2 + 3 * 4) # 곱셈 먼저: 2 + 12 = 14\nprint(\"(2 + 3) * 4 =\", (2 + 3) * 4) # 괄호 먼저: 5 * 4 = 20\n\n2 + 3 * 4 = 14\n(2 + 3) * 4 = 20\n\n\n예제 4: 실수 연산\n소수점이 있는 실수(float)끼리도 당연히 연산이 가능합니다.\n\nprint(\"3.14 * 2 =\", 3.14 * 2)\nprint(\"10.5 / 2.5 =\", 10.5 / 2.5)\n\n3.14 * 2 = 6.28\n10.5 / 2.5 = 4.2\n\n\n주의: 0으로 나누는 것은 수학적으로 정의되지 않으므로, 파이썬에서도 0으로 나누려고 하면 오류(ZeroDivisionError)가 발생합니다.\n\n# print(10 / 0) # 이 코드는 ZeroDivisionError를 발생시킵니다.\n\n\n[실습 3] 산술 연산 연습\n아래 요구사항에 맞춰 계산을 수행하고 결과를 print() 함수로 출력하는 코드를 각각의 코드 셀에 작성해보세요.\n\n숫자 1234와 5678을 더한 결과를 출력하세요.\n숫자 50에서 15를 뺀 결과를 출력하세요.\n숫자 10의 3제곱 (\\(10^3\\))을 계산하여 출력하세요.\n숫자 25를 4로 나누었을 때의 몫과 나머지를 각각 계산하여 출력하세요. (힌트: // 와 % 연산자 사용)\n(100 + 200) / 5 를 계산하여 출력하세요. 괄호의 역할에 주목하세요.\n\n\n\n# 실습 3",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "Introduction.html#경제학-맛보기-간단한-경제-계산",
    "href": "Introduction.html#경제학-맛보기-간단한-경제-계산",
    "title": "1  week1. Introduction to python",
    "section": "2.6 경제학 맛보기: 간단한 경제 계산",
    "text": "2.6 경제학 맛보기: 간단한 경제 계산\n이제 오늘 배운 print와 산술 연산을 활용하여 첫 시간에 잠시 언급했던 간단한 경제 계산을 다시 해봅시다.\n시나리오:\n\n티셔츠 가격(Price) = 15,000원\n판매량(Quantity) = 50장\n고정 비용(Fixed Cost) = 500,000원\n단위당 가변 비용(Variable Cost per Unit) = 5,000원\n\n계산 목표:\n\n총수입 (Total Revenue, TR) = 가격 × 판매량\n총가변비용 (Total Variable Cost, TVC) = 단위당 가변 비용 × 판매량\n총비용 (Total Cost, TC) = 고정 비용 + 총가변비용\n이익 (Profit) = 총수입 - 총비용\n\n파이썬 코드로 계산하기:\n계산 과정을 명확히 하기 위해, 각 단계의 결과를 출력해 보겠습니다.\n\n# 1. 총수입(TR) 계산 및 출력\nprint(\"--- 총수입 계산 ---\")\nprint(\"가격:\", 15000)\nprint(\"판매량:\", 50)\nprint(\"총수입(TR):\", 15000 * 50)\n\n# 2. 총가변비용(TVC) 계산 및 출력\nprint(\"\\n--- 총가변비용 계산 ---\") # \\n 은 줄바꿈 문자입니다.\nprint(\"단위당 가변 비용:\", 5000)\nprint(\"판매량:\", 50)\nprint(\"총가변비용(TVC):\", 5000 * 50)\n\n# 3. 총비용(TC) 계산 및 출력\nprint(\"\\n--- 총비용 계산 ---\")\nprint(\"고정 비용:\", 500000)\n# 위에서 계산한 총가변비용 값을 직접 사용 (지금은 숫자를 다시 쓰지만, 다음 주 변수를 배우면 더 편해집니다)\nprint(\"총비용(TC):\", 500000 + (5000 * 50))\n\n# 4. 이익(Profit) 계산 및 출력\nprint(\"\\n--- 이익 계산 ---\")\n# 위에서 계산한 총수입과 총비용 값을 직접 사용\nprint(\"이익(Profit):\", (15000 * 50) - (500000 + (5000 * 50)))\n\nprint(\"\\n--- 최종 요약 ---\")\nprint(\"총수입:\", 15000 * 50)\nprint(\"총비용:\", 500000 + (5000 * 50))\nprint(\"이 익:\", (15000 * 50) - (500000 + (5000 * 50)))\n\n--- 총수입 계산 ---\n가격: 15000\n판매량: 50\n총수입(TR): 750000\n\n--- 총가변비용 계산 ---\n단위당 가변 비용: 5000\n판매량: 50\n총가변비용(TVC): 250000\n\n--- 총비용 계산 ---\n고정 비용: 500000\n총비용(TC): 750000\n\n--- 이익 계산 ---\n이익(Profit): 0\n\n--- 최종 요약 ---\n총수입: 750000\n총비용: 750000\n이 익: 0\n\n\n이번 예제에서는 계산 과정의 명확성을 위해 각 단계의 결과를 출력했습니다. 하지만 여전히 가격(15000)이나 수량(50) 같은 값들이 여러 번 반복해서 사용되고 있죠? 다음 주에 배울 변수를 사용하면 이런 반복을 줄이고 코드를 훨씬 효율적으로 만들 수 있습니다.",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "Introduction.html#마무리-및-다음-시간-예고",
    "href": "Introduction.html#마무리-및-다음-시간-예고",
    "title": "1  week1. Introduction to python",
    "section": "2.7 7. 마무리 및 다음 시간 예고",
    "text": "2.7 7. 마무리 및 다음 시간 예고\n오늘 첫 수업, 다들 수고 많으셨습니다! 오늘은 파이썬이 왜 경제학 분석에 유용한 도구인지 알아보고, 우리의 작업 공간이 될 Google Colab 사용법을 익혔습니다. 그리고 파이썬의 가장 기본적인 출력 명령어인 print와 코드 설명을 위한 주석 사용법, 마지막으로 파이썬의 강력한 계산 기능을 직접 실습해 보았습니다.\n다음 시간에는:\n오늘 마지막 예제에서 느꼈던 불편함, 즉 반복되는 값들을 효율적으로 관리하는 방법인 변수(Variables) 에 대해 자세히 배울 것입니다. 또한, 파이썬이 다루는 여러 종류의 데이터(숫자, 문자열 등)인 자료형(Data Types) 과 사용자로부터 직접 입력을 받는 input() 함수에 대해서도 알아볼 예정입니다.",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "Introduction.html#첫-주차-과제",
    "href": "Introduction.html#첫-주차-과제",
    "title": "1  week1. Introduction to python",
    "section": "2.8 첫 주차 과제",
    "text": "2.8 첫 주차 과제\n오늘 배운 내용을 복습하고 다음 수업을 준비하기 위해 아래 과제를 Colab에서 새 노트(Week1_Assignment.ipynb 등)에 풀어보세요.\n\nprint() 연습:\n\nprint() 함수를 여러 번 사용하여 다음과 같이 본인 소개를 여러 줄로 출력해보세요. 이름: [본인 이름]     학과: 경제학과     학번: [본인 학번]\n\n산술 연산 연습:\n\n어떤 물건의 가격이 50,000원이고, 10% 할인 쿠폰이 있다고 할 때, 할인 금액과 최종 가격을 계산하여 각각 출력하세요. (힌트: 할인 금액 = 원래 가격 * 0.1, 최종 가격 = 원래 가격 - 할인 금액)\n섭씨 온도(Celsius)를 화씨 온도(Fahrenheit)로 변환하는 공식은 \\(F = (C \\times 9/5) + 32\\) 입니다. 섭씨 25도를 화씨로 변환하여 결과를 출력하세요.\n\n주석 연습:\n\n위 2번 문제의 각 계산 코드 윗줄에 어떤 계산인지 설명하는 주석을 추가하세요.",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>week1. Introduction to python</span>"
    ]
  },
  {
    "objectID": "week2.html",
    "href": "week2.html",
    "title": "2  week2. Variables",
    "section": "",
    "text": "3 제 2주차: 데이터에 이름표를 붙여주자! (변수와 기본 자료형)\n강의 개요:\n지난주에는 파이썬의 기본 계산 기능과 Colab 환경에 익숙해지는 시간을 가졌습니다. 하지만 실제 데이터를 다루려면 숫자나 글자들을 단순히 계산하는 것 이상이 필요합니다. 오늘은 데이터를 효율적으로 저장하고 관리하는 핵심 개념인 변수(Variable) 와 데이터의 종류를 나타내는 자료형(Data Type) 에 대해 깊이 알아볼 것입니다. 또한, 사용자로부터 직접 정보를 입력받는 방법과 데이터의 종류를 필요에 따라 바꾸는 형 변환에 대해서도 배우고 실습합니다. 이 개념들은 앞으로 우리가 경제 및 회계 데이터를 다루는 데 있어 가장 기초적이면서도 중요한 토대가 됩니다.\n이번 시간 학습 목표:",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "week2.html#왜-변수가-필요할까요-데이터-관리의-시작",
    "href": "week2.html#왜-변수가-필요할까요-데이터-관리의-시작",
    "title": "2  week2. Variables",
    "section": "3.1 1. 왜 ’변수’가 필요할까요? : 데이터 관리의 시작",
    "text": "3.1 1. 왜 ’변수’가 필요할까요? : 데이터 관리의 시작\n지난주 마지막 예제에서 티셔츠 가격(15000), 판매량(50) 등의 숫자를 코드에 직접 사용했었죠. 만약 이 티셔츠 가게의 분기별 매출 보고서를 작성한다고 상상해 봅시다. 1분기 매출액, 2분기 매출액, 영업 비용, 순이익… 이런 값들을 매번 숫자로 직접 입력한다면 어떨까요?\n\n실수 가능성: 숫자를 잘못 입력할 가능성이 커집니다. (예: ’15000’을 ’1500’으로 입력)\n수정의 어려움: 만약 특정 분기의 매출액이 수정되어야 한다면, 코드 전체에서 해당 숫자를 찾아 모두 바꿔야 합니다.\n가독성 저하: 15000 * 50 같은 코드만 봐서는 이 숫자들이 무엇을 의미하는지 바로 알기 어렵습니다.\n\n변수(Variable) 는 이러한 문제를 해결해 줍니다. 변수는 특정 값을 저장하는 메모리 공간에 붙이는 이름표입니다. 예를 들어, 한국의 2024년 GDP 추정치 약 2,200조 원이라는 값을 gdp_korea_2024 라는 이름표(변수명)를 붙여 저장해 둘 수 있습니다.\n\n# 예시 (아직 실행하지 마세요. 개념 설명입니다)\ngdp_korea_2024 = 2200.0 # 단위: 조 원 (실수)\npopulation_korea_2024 = 51700000 # 단위: 명 (정수)\n\n이렇게 변수를 사용하면 다음과 같은 장점이 있습니다.\n\n의미 명확화: gdp_korea_2024 라는 이름만 봐도 ’한국의 2024년 GDP 값’이라는 것을 알 수 있습니다. (가독성 향상)\n값 재사용: 이 값을 여러 계산(예: 1인당 GDP 계산)에 쉽게 반복 사용할 수 있습니다. (재사용성 증가)\n쉬운 수정: 만약 GDP 추정치가 2,250조 원으로 변경되면, gdp_korea_2024 = 2250.0 딱 한 줄만 수정하면 이 변수를 사용한 모든 계산 결과가 자동으로 업데이트됩니다. (유지보수 용이)",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "week2.html#변수-만들고-사용하기-이름표-붙이고-값-담기",
    "href": "week2.html#변수-만들고-사용하기-이름표-붙이고-값-담기",
    "title": "2  week2. Variables",
    "section": "3.2 2. 변수 만들고 사용하기 : 이름표 붙이고 값 담기",
    "text": "3.2 2. 변수 만들고 사용하기 : 이름표 붙이고 값 담기\n파이썬에서 변수를 만드는 방법은 아주 간단합니다. 할당 연산자 (=) 를 사용해서 변수 이름에 값을 저장(할당)하면 됩니다.\n변수이름 = 값\n주의: =는 “같다”는 의미가 아니라, “오른쪽의 값을 왼쪽의 변수 이름에 할당(저장)하라” 는 명령입니다!\n예제 1: 국가별 정보 변수에 저장하고 출력하기\n\n# 국가 정보 변수에 할당\ncountry_name_kr = \"대한민국\"\npopulation_kr = 51700000  # 2024년 추정치 (정수)\ngdp_kr_trillion_krw = 2200.0 # 2024년 추정치 (조 원, 실수)\n\ncountry_name_us = \"미국\"\npopulation_us = 335000000 # 2024년 추정치 (정수)\ngdp_us_trillion_usd = 27.0 # 2024년 추정치 (조 달러, 실수)\n\n# 변수에 저장된 값 출력\nprint(\"국가명:\", country_name_kr)\nprint(\"인구수:\", population_kr, \"명\")\nprint(f\"GDP: {gdp_kr_trillion_krw} 조 원\") # f-string 사용 예시\n\nprint(\"\\n--- 다른 국가 정보 ---\") # \\n은 줄바꿈\nprint(\"국가명:\", country_name_us)\nprint(\"인구수:\", population_us, \"명\")\nprint(f\"GDP: {gdp_us_trillion_usd} 조 달러\")\n\n국가명: 대한민국\n인구수: 51700000 명\nGDP: 2200.0 조 원\n\n--- 다른 국가 정보 ---\n국가명: 미국\n인구수: 335000000 명\nGDP: 27.0 조 달러\n\n\n예제 2: 회계 정보 변수에 저장하기\n\n# 가상 기업 'ABC전자'의 2024년 실적\ncompany_name = \"ABC전자\"\nrevenue_2024 = 150000000000 # 매출액 (원)\noperating_cost_2024 = 120000000000 # 영업 비용 (원)\nnet_income_2024 = revenue_2024 - operating_cost_2024 # 순이익 계산\n\nprint(\"회사명:\", company_name)\nprint(\"2024년 매출액:\", revenue_2024, \"원\")\nprint(\"2024년 영업비용:\", operating_cost_2024, \"원\")\nprint(\"2024년 순이익:\", net_income_2024, \"원\")\n\n회사명: ABC전자\n2024년 매출액: 150000000000 원\n2024년 영업비용: 120000000000 원\n2024년 순이익: 30000000000 원\n\n\n예제 3: 변수 값 변경 (재할당)\n변수에는 다른 값을 다시 할당할 수 있습니다. 변수는 이름표일 뿐이고, 그 안에 담긴 내용물(값)은 바뀔 수 있습니다.\n\n# 환율 정보 (2025년 4월 17일 가상 환율)\nexchange_rate_usd_krw = 1350.5 # 1달러당 원화\n\nprint(\"현재 달러 환율:\", exchange_rate_usd_krw)\n\n# 환율이 변경되었다고 가정\nexchange_rate_usd_krw = 1360.0 # 새로운 값 할당\n\nprint(\"변경된 달러 환율:\", exchange_rate_usd_krw)\n\n현재 달러 환율: 1350.5\n변경된 달러 환율: 1360.0\n\n\n변수 이름 규칙 (복습 및 추가)\n\n영문자 또는 밑줄(_)로 시작 (gdp_2024 O, 2024_gdp X)\n영문자, 숫자, 밑줄(_)만 사용 가능 (net_income O, net-income X)\n대소문자 구분 (gdp 와 GDP 는 다른 변수)\n파이썬 예약어 사용 불가 (if, else, class, import 등)\n[권장] 의미를 명확히 알 수 있는 이름 사용 (population_china &gt; pop_cn &gt; pc)\n[권장] 소문자와 밑줄 조합(스네이크 케이스) 사용 (per_capita_gdp)",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "week2.html#데이터의-종류-기본-자료형-data-types",
    "href": "week2.html#데이터의-종류-기본-자료형-data-types",
    "title": "2  week2. Variables",
    "section": "3.3 3. 데이터의 종류: 기본 자료형 (Data Types)",
    "text": "3.3 3. 데이터의 종류: 기본 자료형 (Data Types)\n변수에는 다양한 종류의 데이터를 담을 수 있습니다. 파이썬은 이 데이터의 종류, 즉 자료형(Data Type) 을 중요하게 생각합니다. 왜냐하면 데이터의 종류에 따라 할 수 있는 연산이나 기능이 다르기 때문이죠. 예를 들어, 숫자(GDP, 인구)는 더하거나 뺄 수 있지만, 글자(국가 이름)를 더하는 것은 의미가 다릅니다.\n파이썬의 기본적인 자료형들을 경제/회계 예시와 함께 살펴봅시다.\n1. int (Integer: 정수)\n\n소수점 없는 숫자를 나타냅니다.\n예시: 인구수, 상품 개수, 연도, 회계 계정 코드 등\n코드 예:\n\n\nyear = 2025\npopulation_seoul = 9400000 # 서울시 인구 (약 940만 명)\nnum_companies = 350\n\nprint(\"연도:\", year, type(year))\nprint(\"서울시 인구:\", population_seoul, type(population_seoul))\nprint(\"분석 대상 기업 수:\", num_companies, type(num_companies))\n\n연도: 2025 &lt;class 'int'&gt;\n서울시 인구: 9400000 &lt;class 'int'&gt;\n분석 대상 기업 수: 350 &lt;class 'int'&gt;\n\n\n2. float (Floating-point: 실수)\n\n소수점이 있는 숫자를 나타냅니다. 매우 큰 수나 작은 수를 표현할 때 지수 형태(예: 2.5e-4)를 사용하기도 합니다.\n예시: GDP, 주가, 이자율, 환율, 물가 상승률, 재무 비율 (예: 부채 비율) 등\n코드 예:\n\n\n\ngdp_china_trillion_usd = 19.0 # 중국 GDP (약 19조 달러)\ninterest_rate = 0.035       # 기준 금리 3.5%\nusd_krw_rate = 1355.75      # 달러/원 환율\ndebt_to_equity_ratio = 1.2  # 부채 비율 120%\n\nprint(\"중국 GDP:\", gdp_china_trillion_usd, \"조 달러\", type(gdp_china_trillion_usd))\nprint(\"기준 금리:\", interest_rate, type(interest_rate))\nprint(\"달러/원 환율:\", usd_krw_rate, type(usd_krw_rate))\nprint(\"부채 비율:\", debt_to_equity_ratio, type(debt_to_equity_ratio))\n\n중국 GDP: 19.0 조 달러 &lt;class 'float'&gt;\n기준 금리: 0.035 &lt;class 'float'&gt;\n달러/원 환율: 1355.75 &lt;class 'float'&gt;\n부채 비율: 1.2 &lt;class 'float'&gt;\n\n\n3. str (String: 문자열)\n\n글자들의 나열을 나타냅니다. 작은따옴표(') 또는 큰따옴표(\")로 감싸서 표현합니다.\n예시: 국가 이름, 도시 이름, 회사 이름, 보고서 제목, 날짜(텍스트 형태), 통화 단위(KRW, USD) 등\n코드 예:\n\n\ncountry = \"Germany\"\ncurrency = 'EUR'\nreport_title = \"2024년 4분기 경제 동향 보고서\"\ndate_str = \"2025-04-17\"\n\nprint(\"국가:\", country, type(country))\nprint(\"통화:\", currency, type(currency))\nprint(\"보고서 제목:\", report_title, type(report_title))\nprint(\"날짜(문자열):\", date_str, type(date_str))\n\n국가: Germany &lt;class 'str'&gt;\n통화: EUR &lt;class 'str'&gt;\n보고서 제목: 2024년 4분기 경제 동향 보고서 &lt;class 'str'&gt;\n날짜(문자열): 2025-04-17 &lt;class 'str'&gt;\n\n\n4. bool (Boolean: 불리언)\n\n‘참’(True) 또는 ‘거짓’(False) 두 가지 상태만을 나타냅니다. 주로 조건의 결과나 특정 상태를 표시할 때 사용됩니다. (주의: 첫 글자는 반드시 대문자!)\n예시: 경제 성장 여부 (is_growth_positive), 흑자 여부 (has_surplus), 특정 조건 만족 여부 등\n코드 예:\n\n\nis_inflation_high = True  # 물가가 높은 상태인가?\nis_recession = False      # 경기 침체 상태인가?\n\nprint(\"고인플레이션 상태:\", is_inflation_high, type(is_inflation_high))\nprint(\"경기 침체 상태:\", is_recession, type(is_recession))\n\n고인플레이션 상태: True &lt;class 'bool'&gt;\n경기 침체 상태: False &lt;class 'bool'&gt;\n\n\ntype() 함수 활용\n변수에 어떤 종류의 데이터가 들어있는지 확인하려면 type(변수명) 처럼 type() 함수를 사용하면 됩니다. 위 예제들에서 type() 함수의 결과를 함께 출력했습니다.\n\n\n[실습 1] 변수와 자료형 연습\n아래 경제/회계 관련 데이터를 변수에 저장하고, 각 변수의 값과 자료형을 print(), type() 함수를 사용하여 출력하는 코드를 작성하세요.\n\n일본(Japan)의 2024년 추정 GDP (약 4.5조 달러)를 gdp_japan_trillion_usd 변수에 저장하세요. (자료형: float)\n독일(Germany)의 2024년 추정 인구 (약 8,400만 명)를 population_germany 변수에 저장하세요. (자료형: int)\n유로화의 통화 코드(‘EUR’)를 currency_code_eur 변수에 저장하세요. (자료형: str)\n한국이 OECD 회원국인지 여부 (참)를 is_korea_oecd_member 변수에 저장하세요. (자료형: bool)\n\n\n\n# 실습코드 작성",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "week2.html#자료형-바꾸기-형-변환-type-conversion",
    "href": "week2.html#자료형-바꾸기-형-변환-type-conversion",
    "title": "2  week2. Variables",
    "section": "3.4 4. 자료형 바꾸기: 형 변환 (Type Conversion)",
    "text": "3.4 4. 자료형 바꾸기: 형 변환 (Type Conversion)\n데이터를 다루다 보면, 때때로 자료형을 바꿔야 할 필요가 생깁니다. 예를 들어, 웹사이트에서 가져온 GDP 데이터가 \"2200.0조\" 같은 문자열 형태일 수 있습니다. 이걸 계산에 사용하려면 숫자(실수) 형태로 바꿔야겠죠? 또는 사용자로부터 나이를 입력받으면 문자열로 들어오는데, 이를 가지고 출생 연도를 계산하려면 정수로 바꿔야 합니다. 이렇게 데이터의 형태(자료형)를 바꾸는 것을 형 변환(Type Conversion) 또는 캐스팅(Casting) 이라고 부릅니다.\n주요 형 변환 함수:\n\nint(값): 주어진 값을 정수(int) 로 변환합니다.\n\n실수를 정수로 바꾸면 소수점 이하는 버려집니다. (예: int(3.14) 는 3)\n숫자 형태의 문자열을 정수로 바꿀 수 있습니다. (예: int(\"100\") 는 100)\n\nfloat(값): 주어진 값을 실수(float) 로 변환합니다.\n\n정수나 숫자 형태의 문자열을 실수로 바꿀 수 있습니다. (예: float(100) 는 100.0, float(\"3.14\") 는 3.14)\n\nstr(값): 주어진 값을 문자열(str) 로 변환합니다.\n\n숫자나 불리언 값을 글자 형태로 바꿀 때 사용합니다. (예: str(100) 는 \"100\", str(True) 는 \"True\")\n\n\n형 변환 예제:\n예제 1: 문자열을 숫자로 변환하여 계산하기\n\ngdp_str = \"2200.0\" # GDP 데이터가 문자열로 저장된 경우 (단위: 조 원)\npopulation_str = \"51700000\" # 인구 데이터가 문자열로 저장된 경우\n\n# per_capita_gdp = gdp_str / population_str # 에러 발생! 문자열끼리는 나눗셈 불가\n\n# 계산을 위해 형 변환\ngdp_float = float(gdp_str)       # 문자열 \"2200.0\"을 실수 2200.0으로 변환\npopulation_int = int(population_str) # 문자열 \"51700000\"을 정수 51700000으로 변환\n\n# 1인당 GDP 계산 (단위: 조 원 / 명) -&gt; 원 단위로 바꾸려면 * 1조 / 명\n# 여기서는 조 원 / 명 단위로 계산\nper_capita_gdp = gdp_float / population_int\n\nprint(\"문자열 GDP:\", gdp_str, type(gdp_str))\nprint(\"실수 GDP:\", gdp_float, type(gdp_float))\nprint(\"문자열 인구:\", population_str, type(population_str))\nprint(\"정수 인구:\", population_int, type(population_int))\nprint(\"1인당 GDP (조 원/명):\", per_capita_gdp)\n\n# 원 단위로 1인당 GDP 출력 (약 4255만원)\nper_capita_gdp_krw = (gdp_float * 1000000000000) / population_int\nprint(f\"1인당 GDP (원): {per_capita_gdp_krw:.0f} 원\") # 소수점 아래 버리고 출력\n\n문자열 GDP: 2200.0 &lt;class 'str'&gt;\n실수 GDP: 2200.0 &lt;class 'float'&gt;\n문자열 인구: 51700000 &lt;class 'str'&gt;\n정수 인구: 51700000 &lt;class 'int'&gt;\n1인당 GDP (조 원/명): 4.2553191489361704e-05\n1인당 GDP (원): 42553191 원\n\n\n예제 2: 숫자를 문자열로 변환하여 문장 만들기\n숫자를 설명하는 글자와 함께 출력하고 싶을 때, str() 함수로 숫자를 문자열로 바꿔서 + 연산자로 연결할 수 있습니다. (하지만 f-string을 쓰는 것이 더 편리합니다!)\n\nunemployment_rate = 3.1 # 실업률 (퍼센트)\n\n# 에러 발생: print(\"실업률: \" + unemployment_rate + \"%\")\n\n# str() 사용하여 형 변환 후 연결\nreport_sentence = \"2024년 한국 실업률은 \" + str(unemployment_rate) + \"%로 집계되었습니다.\"\nprint(report_sentence)\n\n# f-string 사용 (권장)\nreport_sentence_f = f\"2024년 한국 실업률은 {unemployment_rate}%로 집계되었습니다.\"\nprint(report_sentence_f)\n\n2024년 한국 실업률은 3.1%로 집계되었습니다.\n2024년 한국 실업률은 3.1%로 집계되었습니다.\n\n\n예제 3: 실수(float)를 정수(int)로 변환 (소수점 버림 확인)\n\naverage_score = 85.7\nfinal_score = int(average_score) # 소수점 이하 버림\n\nprint(\"평균 점수 (실수):\", average_score)\nprint(\"최종 부여 점수 (정수):\", final_score)\n\n평균 점수 (실수): 85.7\n최종 부여 점수 (정수): 85",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "week2.html#sec-visualization-preview",
    "href": "week2.html#sec-visualization-preview",
    "title": "2  week2. Variables",
    "section": "3.5 5. 파이썬의 힘 맛보기: 데이터 시각화 미리보기",
    "text": "3.5 5. 파이썬의 힘 맛보기: 데이터 시각화 미리보기\n자, 지금까지 배운 변수, 자료형, 형 변환만으로는 파이썬 공부가 좀 건조하게 느껴질 수도 있을 것 같습니다. ‘그래서 이걸 배워서 뭘 할 수 있다는 거지?’ 하는 생각이 들 수도 있죠.\n여기서 잠깐! 우리가 이렇게 변수에 저장하고 처리하는 데이터들이 파이썬을 통해 얼마나 의미 있는 시각 정보로 변환될 수 있는지 미리 살짝 맛보는 시간을 가져보겠습니다. 우리가 앞에서 변수에 저장했던 여러 국가들의 GDP 데이터를 간단한 막대 그래프로 비교해 보는 거죠.\n아래 나오는 코드는 지금 당장 완벽하게 이해하지 않아도 괜찮습니다. 특히 import, plt, figure, bar, title, show 같은 부분들은 나중에 우리가 ’데이터 시각화’를 배울 때 자세히 다룰 내용이에요. 지금은 “아하! 우리가 변수에 넣은 데이터(국가 이름, GDP 값)가 이런 멋진 그래프를 만드는 재료가 되는구나!” 그리고 “파이썬 코드가 데이터를 이렇게 보기 좋은 그림으로 바꿔줄 수 있구나!” 라는 가능성을 느껴보는 것이 중요합니다.\n\n# --- 데이터 시각화 맛보기 ---\n# (아직 이 코드를 완벽히 이해할 필요는 없어요! 어떤 결과가 나오는지 보세요)\n\n# 데이터를 시각화하는 강력한 도구 'Matplotlib'을 불러옵니다.\nimport matplotlib.pyplot as plt\nimport platform\n\n# 한글 폰트 설정 (Colab 및 OS 환경에 맞게) - 중요!\n# Colab 환경에서는 아래 코드 실행으로 나눔폰트 설치가 필요할 수 있습니다.\n# !sudo apt-get update -qq\n# !sudo apt-get install -y fonts-nanum* -qq\n\n# 설치 후 진행 (런타임 다시 시작 필요할 수 있음)\ntry:\n    if platform.system() == 'Linux': # Colab 포함 리눅스 환경\n        plt.rc('font', family='NanumBarunGothic')\n    elif platform.system() == 'Windows': # 윈도우 환경\n        plt.rc('font', family='Malgun Gothic')\n    elif platform.system() == 'Darwin': # macOS 환경\n        plt.rc('font', family='AppleGothic')\nexcept FileNotFoundError:\n    print(\"한글 폰트를 찾을 수 없습니다. 영문으로 표시되거나 글자가 깨질 수 있습니다.\")\n    # 필요한 경우, 사용 가능한 다른 폰트 이름을 직접 지정해주세요.\n\nplt.rcParams['axes.unicode_minus'] = False # 마이너스 기호 깨짐 방지\n\n# --- 비교할 데이터 준비 ---\n# (앞에서 배운 변수를 사용하거나, 여기서 직접 값을 지정할 수 있습니다)\n# 예시: 몇 개 국가의 2024년 추정 GDP (단위: 조 USD)\ncountries = ['대한민국', '미국', '중국', '일본', '독일']\n# 앞에서 정의한 변수를 활용할 수도 있지만, 여기서는 간단히 값을 직접 입력\n# gdp_values_usd = [gdp_kr_trillion_krw / 1.35, gdp_us_trillion_usd, ...] # 단위 변환 필요시 복잡\ngdp_values_usd = [1.8, 27.0, 19.0, 4.5, 4.2] # 추정치 (단위: 조 USD)\n\n# --- 막대 그래프 그리기 ---\nplt.figure(figsize=(10, 6)) # 그래프 크기 지정 (선택 사항)\nplt.bar(countries, gdp_values_usd, color=['skyblue', 'red', 'orange', 'green', 'purple']) # 막대 그래프 생성\n\n# 그래프 제목 및 축 레이블 추가 (한글!)\nplt.title('주요 국가별 2024년 추정 GDP 비교', fontsize=15)\nplt.ylabel('GDP (단위: 조 USD)', fontsize=12)\nplt.xlabel('국가', fontsize=12)\nplt.xticks(fontsize=11) # x축 국가 이름 폰트 크기 조절 (선택 사항)\nplt.yticks(fontsize=11) # y축 값 폰트 크기 조절 (선택 사항)\n\n# 그래프 보여주기\nplt.show()\n\n\n\n\n\n\n\n\n어떤가요? 위 코드를 실행하면 주요 국가들의 GDP를 한눈에 비교할 수 있는 막대 그래프가 나타날 겁니다. 어떤 국가의 경제 규모가 가장 크고, 어떤 국가들이 비슷한 수준인지 숫자만 볼 때보다 훨씬 빠르고 명확하게 파악할 수 있죠?\n이것이 바로 데이터 시각화의 힘입니다! 우리가 지금 배우는 변수에 데이터를 담는 방법, 그리고 앞으로 배울 데이터 처리 및 시각화 라이브러리(Matplotlib 등)를 활용하면, 이렇게 복잡한 데이터를 이해하기 쉬운 그림으로 바꾸고 그 안에서 의미 있는 인사이트(통찰) 를 얻을 수 있습니다.\n예를 들어, 여러 국가의 시간에 따른 1인당 GDP 변화를 선 그래프로 그려 추세를 비교하거나, 소득과 소비의 관계를 점으로 찍어(산점도) 그 패턴을 분석하는 등 무궁무진한 분석이 가능해집니다.\n오늘 배운 변수와 자료형이 바로 이런 멋진 분석과 시각화의 가장 기본적인 출발점이라는 것을 기억하면서, 즐겁게 다음 단계로 나아가 봅시다!",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "week2.html#경제회계-응용-변수를-활용한-이익-계산",
    "href": "week2.html#경제회계-응용-변수를-활용한-이익-계산",
    "title": "2  week2. Variables",
    "section": "3.6 6. 경제/회계 응용: 변수를 활용한 이익 계산",
    "text": "3.6 6. 경제/회계 응용: 변수를 활용한 이익 계산\n이제 오늘 배운 내용을 모두 활용해서, 지난주에 했던 이익 계산 예제를 훨씬 개선해 봅시다. 모든 값을 변수로 먼저 정의하고, 계산은 변수 이름을 사용하여 수행합니다.\n시나리오 복습:\n\n티셔츠 가격(Price) = 15,000원\n판매량(Quantity) = 50장\n고정 비용(Fixed Cost) = 500,000원\n단위당 가변 비용(Variable Cost per Unit) = 5,000원\n\n변수를 사용한 계산:\n\n# --- 입력 정보 (변수로 정의) ---\nprice = 15000\nquantity = 50\nfixed_cost = 500000\nvariable_cost_per_unit = 5000\n\n# --- 계산 과정 (변수 사용) ---\n# 1. 총수입 (TR)\ntotal_revenue = price * quantity\n\n# 2. 총가변비용 (TVC)\ntotal_variable_cost = variable_cost_per_unit * quantity\n\n# 3. 총비용 (TC)\ntotal_cost = fixed_cost + total_variable_cost\n\n# 4. 이익 (Profit)\nprofit = total_revenue - total_cost\n\n# 5. 이익률 (Profit Margin) 계산 (추가)\n# 0으로 나누는 경우를 방지하기 위해 총수입이 0보다 클 때만 계산 (간단한 예방)\nif total_revenue &gt; 0:\n    profit_margin = (profit / total_revenue) * 100\nelse:\n    profit_margin = 0 # 매출이 없으면 이익률도 0\n\n# --- 결과 출력 ---\nprint(f\"--- 티셔츠 판매 분석 ({quantity}개 판매 기준) ---\")\nprint(f\"총수입 (TR): {total_revenue} 원\")\nprint(f\"총비용 (TC): {total_cost} 원 (고정:{fixed_cost}, 가변:{total_variable_cost})\")\nprint(f\"이익 (Profit): {profit} 원\")\nprint(f\"이익률 (Profit Margin): {profit_margin:.2f}%\") # 소수점 2자리까지 출력\n\n# --- 만약 가격이 16000원으로 변경된다면? ---\nprint(\"\\n--- 가격 변경 시뮬레이션 (가격을 16000원으로 변경) ---\")\nprice = 16000 # 이 변수 값만 수정!\n\n# 계산 다시 수행 (동일한 코드 재사용 가능)\ntotal_revenue = price * quantity\ntotal_variable_cost = variable_cost_per_unit * quantity\ntotal_cost = fixed_cost + total_variable_cost\nprofit = total_revenue - total_cost\nif total_revenue &gt; 0:\n    profit_margin = (profit / total_revenue) * 100\nelse:\n    profit_margin = 0\n\n# 변경된 결과 출력\nprint(f\"변경된 총수입 (TR): {total_revenue} 원\")\nprint(f\"변경된 이익 (Profit): {profit} 원\")\nprint(f\"변경된 이익률 (Profit Margin): {profit_margin:.2f}%\")\n\n--- 티셔츠 판매 분석 (50개 판매 기준) ---\n총수입 (TR): 750000 원\n총비용 (TC): 750000 원 (고정:500000, 가변:250000)\n이익 (Profit): 0 원\n이익률 (Profit Margin): 0.00%\n\n--- 가격 변경 시뮬레이션 (가격을 16000원으로 변경) ---\n변경된 총수입 (TR): 800000 원\n변경된 이익 (Profit): 50000 원\n변경된 이익률 (Profit Margin): 6.25%\n\n\n변수를 사용하니 어떤 점이 좋아졌나요? 가격(price) 값만 바꾸고 계산 부분을 다시 실행하면 모든 결과가 업데이트됩니다. 훨씬 효율적이죠!",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "week2.html#마무리-및-다음-시간-예고",
    "href": "week2.html#마무리-및-다음-시간-예고",
    "title": "2  week2. Variables",
    "section": "3.7 7. 마무리 및 다음 시간 예고",
    "text": "3.7 7. 마무리 및 다음 시간 예고\n오늘은 데이터를 다루는 데 있어 가장 기본이 되는 변수와 자료형, 그리고 형 변환과 사용자 입력(input()) 에 대해 배웠습니다. 변수를 이용해 어떻게 데이터를 효율적으로 관리하고 코드의 가독성과 유연성을 높이는지, 그리고 데이터의 종류에 맞게 형 변환을 하는 것이 왜 중요한지, 특히 input() 함수를 사용할 때의 주의점까지 확인했습니다. 다양한 경제/회계 관련 예시를 통해 개념을 익혔기를 바랍니다.\n다음 시간에는:\n이제 우리는 데이터를 변수에 담고 기본적인 처리를 할 수 있게 되었습니다. 다음 주에는 프로그램의 흐름을 제어하는 첫 번째 방법인 조건문(if, elif, else) 을 배웁니다. 조건문을 사용하면 특정 조건이 참인지 거짓인지에 따라 프로그램이 다른 동작을 하도록 만들 수 있습니다. 예를 들어, “GDP 성장률이 3% 이상이면 ’고성장’이라고 출력하고, 아니면 ’저성장’이라고 출력”하는 식의 코드를 작성할 수 있게 될 것입니다. 이를 통해 우리의 파이썬 코드가 훨씬 더 지능적으로 동작하게 될 테니 기대해주세요!",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "week2.html#두-번째-주차-과제",
    "href": "week2.html#두-번째-주차-과제",
    "title": "2  week2. Variables",
    "section": "3.8 두 번째 주차 과제",
    "text": "3.8 두 번째 주차 과제\n오늘 배운 변수, 자료형, 형 변환, input() 함수를 복습하기 위해 다음 과제를 Colab에서 새 노트(Week2_Assignment.ipynb 등)에 풀어보세요.\n\n국가별 1인당 GDP 계산기:\n\n사용자로부터 국가 이름을 입력받아 country_name 변수에 저장하세요.\n같은 사용자로부터 해당 국가의 총 GDP(예: 조 달러 단위)를 입력받아 total_gdp_str 에 저장 후, 실수(float) 로 변환하여 total_gdp 변수에 저장하세요.\n같은 사용자로부터 해당 국가의 인구 수(예: 만 명 단위)를 입력받아 population_str 에 저장 후, 정수(int) 로 변환하여 population 변수에 저장하세요. (단위 주의: 입력받은 값에 10000을 곱해야 실제 인구수가 됩니다)\n1인당 GDP(달러)를 계산하세요. (계산식: (total_gdp * 1조) / (population * 1만)) 또는 더 간단히 (total_gdp * 1억) / population (조/만 = 억)\nf-string을 이용하여 최종 결과를 “[국가이름]의 1인당 GDP는 약 X 달러입니다.” 형식으로 출력하세요 (X는 계산 결과, 소수점 없이 정수로 표현).\n\n재무 비율 계산 (가상):\n\n어떤 기업의 총 부채(Total Liabilities)가 500억 원이고, 총 자본(Total Equity)이 1000억 원이라고 가정합니다. 이 두 값을 각각 total_liabilities, total_equity 변수에 정수로 저장하세요 (단위: 원).\n부채 비율(Debt-to-Equity Ratio)을 계산하세요. (계산식: 총 부채 / 총 자본)\n계산된 부채 비율을 debt_ratio 변수에 저장하고, 이 값과 변수의 자료형을 함께 출력하세요.\nf-string을 이용하여 “해당 기업의 부채 비율은 Y 입니다.” 형식으로 출력하세요 (Y는 계산 결과).",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>week2. Variables</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summery",
    "section": "",
    "text": "3.1 NumPy\n이 글자는 왜 안보이는걸까 ..\n이 교육자료는 qmd 와\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summery</span>"
    ]
  },
  {
    "objectID": "summary.html#matplotlib",
    "href": "summary.html#matplotlib",
    "title": "3  Summery",
    "section": "3.2 Matplotlib",
    "text": "3.2 Matplotlib\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)",
    "crumbs": [
      "Curriculum",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summery</span>"
    ]
  }
]